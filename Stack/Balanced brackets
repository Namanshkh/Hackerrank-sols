class Result {

    /*
     * Complete the 'isBalanced' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */

    public static String isBalanced(String s) 
    {
        Stack<Character> stack = new Stack<>();
        for(int i=0 ; i<s.length() ; i++ )
        {
            char ch = s.charAt(i);
            if(ch == '(' || ch =='{' || ch == '[')
                stack.push(ch);
            else
            {  
            if (stack.isEmpty()){
                return "NO";    
            }
            char pop_value = stack.pop();
            
              if(ch == ')' && pop_value != '(' )
                return "NO";
    
             else if(ch == '}' &&  pop_value != '{')
            {
                return "NO";
            }
            
             else if(ch == ']' && pop_value != '[')
            {
                return "NO";
            }
        }

    }
    
    if(stack.isEmpty())
        {
            return "YES";
        }
        else
        {
        return "NO";
        }
}
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                String s = bufferedReader.readLine();

                String result = Result.isBalanced(s);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
